# ==============  Set init  ==============

# Set color codes
autoload -U colors && colors
# Define the prompt function
# autoload -U compinit
# compinit
autoload -U promptinit && promptinit
setopt PROMPT_SUBST
# PS1='%B%{$fg[red]%}[%{$fg[yellow]%}%n%{$fg[green]%}@%{$fg[blue]%}%M %{$fg[magenta]%}%~%{$fg[red]%}%{$reset_color%}%{$fg[cyan]%}$(git_prompt)%{$fg[red]%}]%{$reset_color%}$%b '
PROMPT='%{$fg_bold[black]%}[%D{%H:%M}] %{$fg[blue]%}%m%{$fg_bold[black]%}:%{$fg[yellow]%}%~ %{$fg[green]%}$(git_prompt_info) %{$fg[red]%}| %{$reset_color%}'



# ==============  Set ZSH  ==============
export ZSH_AUTOSUGGEST_STRATEGY=(match_prev_cmd history completion)
export ZSH_AUTOSUGGEST_USE_ASYNC=true

_ZSH_PLUGINS="/usr/share/zsh/plugins"
_enabled_plugins=(
        zsh-autosuggestions
        zsh-history-substring-search
        zsh-syntax-highlighting
        zsh-completions
)

zstyle ':completion:*' menu select
zmodload zsh/complist

fpath=(/usr/local/share/zsh-completions $fpath)

for _zsh_plugin in $_enabled_plugins[@]; do
   [[ ! -r "$_ZSH_PLUGINS/$_zsh_plugin/$_zsh_plugin.zsh" ]] || source $_ZSH_PLUGINS/$_zsh_plugin/$_zsh_plugin.zsh
done



# Define the git prompt
function git_prompt_info {
  git rev-parse --is-inside-work-tree &>/dev/null && {
    branch=$(git rev-parse --abbrev-ref HEAD)
    echo "($branch)"
  }
}

# Custom greeting function
function greet {
  # OS and kernel
  echo -e "\033[1mOS: \033[0;32m$(uname -ro)\033[0m"
  
  # Uptime
  echo -e "\033[1mUptime: \033[0;32m$(uptime -p | sed 's/^up //')\033[0m"
  
  # Hostname
  echo -e "\033[1mHostname: \033[0;32m$(uname -n)\033[0m"
  
  # Network interfaces
  echo -e "\033[1mNetwork:\033[0m"
    ip addr show up scope global | grep -E ': <|inet' | sed \
    -e 's/^[[:digit:]]\+: //' \
    -e 's/: <.*//' \
    -e 's/.*inet[[:digit:]]* //' \
    -e 's/\/.*//' | \
    awk 'BEGIN {i=""} /\.|:/ {print i" "$0"\n"; next} // {i = $0}' | \
    sort | \
    column -t -R1 | \
    sed 's/m\(\(10\.\|172\.\(1[6-9]\|2[0-9]\|3[01]\)\|192\.168\.\).*\)/m\033[24m\1/' | \
    sed 's/^/\t/'
}

greet

# add a command line to the shells history without executing it
commit-to-history () {
       print -s ${(z)BUFFER}
       zle send-break
}


# ==============  Set bindkeys  ==============
zle -N commit-to-history
bindkey -M viins "^x^h" commit-to-history
bindkey -M emacs "^x^h" commit-to-history
bindkey "^A" vi-beginning-of-line
bindkey "^E" vi-end-of-line
bindkey "^[[1;5C" forward-word
bindkey "^[[1;5D" backward-word
bindkey "\e[3~" delete-char
bindkey '^R' history-incremental-search-backward



# ==============  Set alias  ==============
alias grep='grep --color'
alias x="xdg-open"

#https://github.com/ogham/exa
alias ls='exa'
alias ll='exa -l'
alias la='exa -a'
alias lla='exa -la'
alias lt='exa --tree'

## entrance
alias ..="cd .."
alias ...="cd ..; cd .."
alias de="cd ~/Desktop"
alias dot="cd ~/Repos/dotfiles"
alias blog="cd ~/Repos/blog"

alias start="sudo systemctl start"
alias stop="sudo systemctl stop"
alias restart="sudo systemctl restart"
alias status="sudo systemctl status"
alias enable="sudo systemctl enable"
alias disable="sudo systemctl disable"

alias yt="yt-dlp"
# alias tlmgr="tllocalmgr"
alias tlmgr='TEXMFDIST/scripts/texlive/tlmgr.pl --usermode'
alias pc="proxychains4"
alias pmpv="proxychains4 mpv"
alias tlmgr="/usr/share/texmf-dist/scripts/texlive/tlmgr.pl --usermode"
alias setproxy="export http_proxy=http://127.0.0.1:8080 && export https_proxy=https://127.0.0.1:8080"
alias unsetproxy="unset http_proxy && unset https_proxy"
# alias code="code --disable-gpu"
alias hx="helix"
alias vim="nvim"
alias fsssh="sshfs yuki@192.168.50.20:/mnt/btrfs-hdd/ ~/Public/"
alias ufsssh="fusermount3 -u ~/Public"
alias myip4="curl -sL ipecho.net/json"
alias myip6="curl -s wtfismyip.com/json"
alias gc="git clone"
alias steam="flatpak run --filesystem=~/.local/share/fonts --filesystem=~/.config/fontconfig com.valvesoftware.Steam"
alias mutt="neomutt"
alias wrename="wezterm cli set-tab-title"

alias orphans="sudo pacman -Qtdq | sudo pacman -Rns -"
alias install="sudo pacman -S"
alias upgrade="sudo pacman -Syu"
alias remove="sudo pacman -Rns"
alias search="pacman -Ss"


# ==============  Set functions  ==============
function zsh_stats() {
    fc -l 1 | awk '{CMD[$2]++;count++;}END { for (a in CMD)print CMD[a] " " CMD[a]/count*100 "% " a;}' | grep -v "./" | column -c3 -s " " -t | sort -nr | nl |  head -n20
}

# Terminal file manager
function rancd {
    tempfile="$(mktemp)"
    /usr/bin/ranger --choosedir="$tempfile" "${@:-$(pwd)}"
    test -f "$tempfile" &&
    if [ "$(cat -- "$tempfile")" != "$(echo -n `pwd`)" ]; then
	cd -- "$(cat "$tempfile")"
    fi
    rm -f -- "$tempfile"
}

function lk {
  cd "$(walk "$@")"
}

function onesync {

    exclusion="{.stignore,.stfolder/**,.git/**,Element/**}"

    echo "=====  Start synchronizing ebooks  ===== "
    rclone sync ~/Documents/Library/ OneDrive:/ebooks/ -P --exclude ${exclusion}
    rclone sync ~/Documents/Calibre\ Library/ OneDrive:/CalibreL\ Library/ -P --exclude ${exclusion}
    echo "=====  Start synchronizing Music  ===== "
    rclone sync ~/Music/ OneDrive:/Music/ -P --exclude ${exclusion}
}

function curltime() {
    # https://stackoverflow.com/a/22625150
    curl -w @$HOME/Repos/dotfiles/scripts/curl-format.txt -o /dev/null -s $1
}


# convert any format of image to webp format
# requirements:
#     ImageMagick: https://wiki.archlinux.org/title/ImageMagick
#     try: https://github.com/binpash/try
function c2webp() {
    filename=$(basename "$1")
    filename_without_extension=${filename%.*}
    convert $1 -quality 10 ${filename_without_extension}.webp
    echo "${filename_without_extension}.webp converted!"
    try rm $filename
}


# DNS
# https://github.com/ogham/dog
function dns () { if [[ "$#" -eq 1 ]]; then
        dog --tls "@1.1.1.1:853" A AAAA NS MX TXT $@
	# dog --https "@https://dns.alidns.com/dns-query" A AAAA NS MX TXT $@
    else
        dog --tls "@1.1.1.1:853" A AAAA $@
    fi
}


# Download YouTube Music
function ytm() {
    if [[ "$@" == *"playlist"* ]]; then
        yt-dlp \
            --extract-audio \
            --format "bestaudio" \
            --audio-format "mp3" \
            --add-metadata --embed-thumbnail \
            --parse-metadata "playlist_index:%(track_numbers)s" \
            --output "~/Music/%(playlist_index)s-%(title)s.%(ext)s" \
            "$@"
    elif [[ "$@" == *"split-chapter"* ]]; then
        # e.g. [ ytm --split-chapter "https://www.youtube.com/watch?v=xkDlet4cxuQ" ]
        yt-dlp \
            --extract-audio \
            --format "bestaudio" \
            --audio-format "mp3" \
            #--paths temp:"/tmp" \
            --paths "~/Music" \
            --split-chapter \
            #--add-metadata --embed-chapters \
            --add-metadata --embed-metadata \
            --output "chapter:%(section_number)s - %(section_title)s.%(ext)s" \
            "$@"
    else
        yt-dlp \
            --extract-audio \
            --format "bestaudio" \
            --audio-format "mp3" \
            --add-metadata --embed-thumbnail \
            --output "~/Music/%(title)s.%(ext)s" \
            "$@"
    fi
}

# https://yazi-rs.github.io/docs/quick-start
function ya() {
	tmp="$(mktemp -t "yazi-cwd.XXXXX")"
	yazi "$@" --cwd-file="$tmp"
	if cwd="$(cat -- "$tmp")" && [ -n "$cwd" ] && [ "$cwd" != "$PWD" ]; then
		cd -- "$cwd"
	fi
	rm -f -- "$tmp"
}


function cct() {
    if [[ $# -lt 1 ]]; then
        echo "Usage: cct [t2s|s2t] [text]"
        return 1
    fi

    case "$1" in
        t2s)
            if [[ $# -gt 1 ]]; then
                echo "${@:2}" | opencc -c t2s.json
            else
                opencc -c t2s.json
            fi
            ;;
        s2t)
            if [[ $# -gt 1 ]]; then
                echo "${@:2}" | opencc -c s2t.json
            else
                opencc -c s2t.json
            fi
            ;;
        *)
            echo "Invalid option. Use 't2s' for Traditional to Simplified or 's2t' for Simplified to Traditional."
            return 1
            ;;
    esac
}



# ==============  Set others  ==============
HISTFILE=~/.cache/zsh_history
HISTSIZE=5000
SAVEHIST=5000
setopt appendhistory

set backspace=indent,eol,start
export EDITOR="nvim"

export GOPATH=$HOME/.go
export PATH=$HOME/.cargo/bin:$PATH

# atuin
# eval "$(atuin init zsh)"

source <(fzf --zsh)
